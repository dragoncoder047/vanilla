This is just a couple of functions that make my life easier
when working with HTML. They are in their own repo because
they are used in multiple other projects.

I suppose I could add a LICENSE but this just seems too short
for any kind of licensing to make sense.

--------------------------------------------------------------
Functions:


make(specifier, attributes, ...children) => HTMLElement
    Returns a HTML element (using document.createElement) that is not yet attached to the DOM. The first argument is the tag name and classes separated by dots. The second argument is an object with attributes and the rest of the arguments are the children. Strings are added as text nodes (the browser will escape them).

        var link = "http://google.com";
        make("span.foo",
             { id: "bar" },
             "click ", make("a",
                            { href: link,
                            target: "_blank" },
                            "here"),
             " to go to google")
        => <span class="foo" id="bar">click <a href="http://google.com", target="_blank">here</a>to go to google</span>


html(htmlString) => HTMLSpanElement
    Creates a <span> element using make() and then stuffs the htmlString into the innerHTML. This is just to allow you to use HTML strings with make() which by default escapes stuff. Also useful when you just want to create some static HTML.

        html(`click <a href="http://google.com" target="_blank">here</a> to go to google`)
        => <span>click <a href="http://google.com", target="_blank">here</a> to go to google</span>


get(selector) => HTMLElement | null
    An alias for document.querySelector(). The name was too long for my liking.


bind(selector, event, callback)
    Equivalent to get(selector).addEventListener(event, callback)... again because .addEventListener() is too long to type.


waitFor(selector, event) => Promise<Event>
    Returns a promise that resolves with the next event detail for the event on the element. If the element does not exist or the event never fires, the promise will never resolve.


replace(oldNode, newNode) => oldNode
    Replaces the node with the newNode. Again because the "raw" DOM API is too long to type. It returns the old element like the DOM API does.
